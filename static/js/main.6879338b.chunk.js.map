{"version":3,"sources":["queries.js","Posts.js","Login.js","CreatePost.js","LoadingTop.js","PostsTop.js","resolvers.js","Guestbook.js","App.js","serviceWorker.js","index.js"],"names":["LOGIN","gql","CREATE_POST","GET_POSTS","GET_ACCESS_TOKEN","Posts","useQuery","data","loading","error","posts","useApolloClient","readQuery","query","e","className","console","log","JSON","stringify","Array","isArray","length","reverse","map","post","id","title","contents","author","name","avatar","key","src","alt","Login","loginWithRedirect","useAuth0","onClick","backendLogin","loginMutation","getAccessToken","client","user","setIsLoading","a","opts","redirectUri","window","location","origin","audience","process","scope","accessToken","writeData","message","variables","sub","picture","CreatePost","setIsSubmitted","getAccessTokenWithPopup","React","useState","isLoading","titleValue","setTitleValue","contentsValue","setContentsValue","submitEnabled","setSubmitEnabled","useMutation","login","useEffect","createPost","type","placeholder","value","onChange","target","handleTitleChanged","trim","handleContentsChanged","update","cache","writeQuery","concat","disabled","LoadingTop","PostsTop","isAuthenticated","typeDefs","InMemoryCache","httpLink","HttpLink","uri","authLink","setContext","_","headers","token","authorization","ApolloClient","link","resolvers","Guestbook","isSubmitted","domain","clientId","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"qqCAEO,IAAMA,EAAQC,IAAH,KASLC,EAAcD,IAAH,KAcXE,EAAYF,IAAH,KAcTG,EAAmBH,IAAH,KC2BdI,EA9DD,WAAO,IAAD,EACeC,YAASH,GAAlCI,EADU,EACVA,KAAMC,EADI,EACJA,QAASC,EADL,EACKA,MACnBC,EAAQ,KAEZ,IAIEA,EAHeC,cACYC,UAAU,CAAEC,MAAOV,IACjB,MAE7B,MAAOW,GACHP,IACFG,EAAQH,EAAKG,OAIjB,OAAIF,EAEA,yBAAKO,UAAU,qBACb,yBAAKA,UAAU,cACb,gCAKJN,GACFO,QAAQC,IAAIC,KAAKC,UAAUV,IACpB,gDAGJC,GAAUU,MAAMC,QAAQX,IAA2B,IAAjBA,EAAMY,OACpC,yBAAKP,UAAU,6BAAf,iBAIP,oCACGL,GACC,YAAIA,GAAOa,UAAUC,KAAI,SAACC,GAAU,IAC1BC,EAAgCD,EAAhCC,GAAIC,EAA4BF,EAA5BE,MAAOC,EAAqBH,EAArBG,SAAUC,EAAWJ,EAAXI,OACrBC,EAAiBD,EAAjBC,KAAMC,EAAWF,EAAXE,OACd,OACE,6BAAShB,UAAU,QAAQiB,IAAKN,GAC9B,4BAAQX,UAAU,cAChB,uBAAGA,UAAU,kBACX,yBAAKkB,IAAKF,EAAQG,IAAI,aAG1B,yBAAKnB,UAAU,iBACb,yBAAKA,UAAU,WACb,2BACE,gCAASY,GADX,OAC8B,gCAASG,GACrC,6BACCF,W,QC5BNO,EAxBD,WAAO,IACXC,EAAsBC,cAAtBD,kBAER,OACE,oCACE,6BAASrB,UAAU,SACjB,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,6BACb,2BACE,mEAEF,4BACEA,UAAU,+BACVuB,QAAS,kBAAMF,MAEf,+C,yBCbRG,EAAY,uCAAG,WACnBC,EACAC,EACAC,EACAC,EACAC,GALmB,mBAAAC,EAAA,sEAQXC,EAAO,CACXC,YAAaC,OAAOC,SAASC,OAC7BC,SAAUC,0CACVC,MAAO,qCAXQ,SAaSZ,EAAeK,GAbxB,OAaXQ,EAbW,OAejBZ,EAAOa,UAAU,CAAEhD,KAAM,CAAE+C,YAAaA,KAfvB,gDAiBjBtC,QAAQC,IAAI,KAAEuC,SAjBG,QAoBbC,EAAY,CAChBA,UAAW,CAAE/B,GAAIiB,EAAKe,IAAK5B,KAAMa,EAAKb,KAAMC,OAAQY,EAAKgB,UAE3DnB,EAAciB,GAEdb,GAAa,GAzBM,yDAAH,8DAoIHgB,EAxGI,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eAAqB,EACCxB,cAAlCM,EADiC,EACjCA,KAAMmB,EAD2B,EAC3BA,wBACRpB,EAAS/B,cAF0B,EAGPoD,IAAMC,UAAS,GAHR,mBAGlCC,EAHkC,KAGvBrB,EAHuB,OAILmB,IAAMC,SAAS,IAJV,mBAIlCE,EAJkC,KAItBC,EAJsB,OAKCJ,IAAMC,SAAS,IALhB,mBAKlCI,EALkC,KAKnBC,EALmB,OAMCN,IAAMC,UAAS,GANhB,mBAMlCM,EANkC,KAMnBC,EANmB,OAsBzBC,YAAYxE,GAArByE,EAtBkC,oBAuBzCV,IAAMW,WAAU,WACdnC,EAAakC,EAAOX,EAAyBpB,EAAQC,EAAMC,KAC1D,CAAC6B,EAAOX,EAAyBpB,EAAQC,EAAMC,IAzBT,MA2BpB4B,YAAYtE,GAA1ByE,EA3BkC,oBA8CzC,OAAOV,EACL,yBAAKlD,UAAU,6BACb,yBAAKA,UAAU,cACb,gCAIJ,6BAASA,UAAU,SACjB,4BAAQA,UAAU,cAChB,uBAAGA,UAAU,kBACX,yBAAKkB,IAAKU,EAAKgB,QAASzB,IAAI,kBAGhC,yBAAKnB,UAAU,iBACb,yBAAKA,UAAU,WACb,uBAAGA,UAAU,qBAAb,cACa,gCAAS4B,EAAKb,QAG7B,yBAAKf,UAAU,SACb,2BACEW,GAAG,aACHX,UAAU,sCACV6D,KAAK,OACLC,YAAY,mBACZC,MAAOZ,EACPa,SAAU,SAACjE,GAAD,OAhEO,SAACA,GAC1BqD,EAAcrD,EAAEkE,OAAOF,OA+DEG,CAAmBnE,OAGxC,6BACA,yBAAKC,UAAU,SACb,8BACEW,GAAG,gBACHX,UAAU,8BACV6D,KAAK,OACLC,YAAY,kBACZC,MAAOV,EACPW,SAAU,SAACjE,GAAD,OAvEU,SAACA,GAC7BuD,EAAiBvD,EAAEkE,OAAOF,OAEI,KAA1BhE,EAAEkE,OAAOF,MAAMI,OACjBX,GAAiB,GAEjBA,GAAiB,GAiEMY,CAAsBrE,OAG3C,yBAAKC,UAAU,SACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,cACb,4BACEA,UAAU,+BACVuB,QA/DW,WACvB,IAQMmB,EAAY,CAChBA,UAAW,CAAE/B,GAAIiB,EAAKe,IAAK/B,MAAOuC,EAAYtC,SAAUwC,GACxDgB,OAVkB,SAACC,EAAD,GAAsC,IAApBV,EAAmB,EAA3BpE,KAAQoE,WAC5BjE,EAAU2E,EAAMzE,UAAU,CAAEC,MAAOV,IAAnCO,MACR2E,EAAMC,WAAW,CACfzE,MAAOV,EACPI,KAAM,CAAEG,MAAOA,EAAM6E,OAAO,CAACZ,OAE/Bd,GAAe,KAMjBc,EAAWlB,GACXU,EAAc,IACdE,EAAiB,KAiDLmB,UAAWlB,GAEX,iDC7GDmB,EAhBI,WACjB,OACE,oCACE,6BAAS1E,UAAU,SACjB,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,6BACb,yBAAKA,UAAU,cACb,oCCWC2E,EAdE,SAAC,GAAwB,IAAtB7B,EAAqB,EAArBA,eAAqB,EACAxB,cAA/B4B,EAD+B,EAC/BA,UAAW0B,EADoB,EACpBA,gBAEnB,OAAI1B,EACK,kBAAC,EAAD,MAGF0B,EACL,kBAAC,EAAD,CAAY9B,eAAgBA,IAE5B,kBAAC,EAAD,O,6JCdG,IAAM+B,EAAW3F,IAAH,K,OCWfoF,G,MAAQ,IAAIQ,KAElBR,EAAM9B,UAAU,CACdhD,KAAM,CACJ+C,YAAa,MAIjB,IAAMwC,EAAW,IAAIC,IAAS,CAC5BC,IAAI,GAAD,OAAK5C,iCAAL,cAGC6C,EAAWC,aAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAC1B7F,EAAO8E,EAAMzE,UAAU,CAAEC,MAAOT,IAChCiG,EAAS9F,GAAQA,EAAI,aAAoB,KAE/C,MAAO,CACL6F,QAAQ,eACHA,EADE,CAELE,cAAeD,EAAK,iBAAaA,GAAU,SAK3C3D,EAAS,IAAI6D,IAAa,CAC9BlB,QACAmB,KAAMP,EAASV,OAAOO,GACtBF,WACAa,UDjCuB,KCyDVC,EArBG,WAAO,IAAD,EACgB3C,IAAMC,UAAS,GAD/B,mBACf2C,EADe,KACF9C,EADE,KAGtB,OACE,kBAAC,IAAD,CACE+C,OAAQxD,6BACRyD,SAAUzD,mCACVL,YAAaC,OAAOC,SAASC,OAC7BC,SAAUC,0CACVC,MAAM,gBAEN,kBAAC,IAAD,CAAgBX,OAAQA,GACtB,yBAAK3B,UAAU,qBACZ4F,EAAc,KAAO,kBAAC,EAAD,CAAU9C,eAAgBA,IAChD,kBAAC,EAAD,UC/CKiD,MARf,WACE,OACE,yBAAK/F,UAAU,OACb,kBAAC,EAAD,QCMcgG,QACW,cAA7B/D,OAAOC,SAAS+D,UAEe,UAA7BhE,OAAOC,SAAS+D,UAEhBhE,OAAOC,SAAS+D,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApH,GACLO,QAAQP,MAAMA,EAAM+C,c","file":"static/js/main.6879338b.chunk.js","sourcesContent":["import gql from \"graphql-tag\";\n\nexport const LOGIN = gql`\n  mutation login($id: String!, $name: String, $avatar: String) {\n    login(id: $id, name: $name, avatar: $avatar) {\n      name\n      avatar\n    }\n  }\n`;\n\nexport const CREATE_POST = gql`\n  mutation createPost($id: String!, $title: String, $contents: String!) {\n    createPost(id: $id, title: $title, contents: $contents) {\n      id\n      title\n      contents\n      author {\n        name\n        avatar\n      }\n    }\n  }\n`;\n\nexport const GET_POSTS = gql`\n  query GetPosts {\n    posts {\n      id\n      title\n      contents\n      author {\n        name\n        avatar\n      }\n    }\n  }\n`;\n\nexport const GET_ACCESS_TOKEN = gql`\n  query GetAccessToken {\n    accessToken @client\n  }\n`;\n","import React from \"react\";\nimport { useQuery, useApolloClient } from \"@apollo/react-hooks\";\nimport { GET_POSTS } from \"./queries.js\";\n\nconst Posts = () => {\n  const { data, loading, error } = useQuery(GET_POSTS);\n  let posts = null;\n\n  try {\n    const client = useApolloClient();\n    const cacheResult = client.readQuery({ query: GET_POSTS });\n    const cacheData = cacheResult[\"posts\"];\n    posts = cacheData;\n  } catch (e) {\n    if (data) {\n      posts = data.posts;\n    }\n  }\n\n  if (loading)\n    return (\n      <div className=\"has-text-centered\">\n        <div className=\"lds-circle\">\n          <div></div>\n        </div>\n      </div>\n    );\n\n  if (error) {\n    console.log(JSON.stringify(error));\n    return <>Error!</>;\n  }\n\n  if (!posts || (Array.isArray(posts) && posts.length === 0)) {\n    return <div className=\"content has-text-centered\">No posts yet!</div>;\n  }\n\n  return (\n    <>\n      {posts &&\n        [...posts].reverse().map((post) => {\n          const { id, title, contents, author } = post;\n          const { name, avatar } = author;\n          return (\n            <article className=\"media\" key={id}>\n              <figure className=\"media-left\">\n                <p className=\"image is-64x64\">\n                  <img src={avatar} alt=\"avatar\" />\n                </p>\n              </figure>\n              <div className=\"media-content\">\n                <div className=\"content\">\n                  <p>\n                    <strong>{title}</strong> by <strong>{name}</strong>\n                    <br />\n                    {contents}\n                  </p>\n                </div>\n              </div>\n            </article>\n          );\n        })}\n    </>\n  );\n};\n\nexport default Posts;\n","import React from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\n\nconst Login = () => {\n  const { loginWithRedirect } = useAuth0();\n\n  return (\n    <>\n      <article className=\"media\">\n        <div className=\"media-content\">\n          <div className=\"content has-text-centered\">\n            <p>\n              <strong>You must be logged in to post.</strong>\n            </p>\n            <button\n              className=\"button is-primary is-rounded\"\n              onClick={() => loginWithRedirect()}\n            >\n              <strong>Login</strong>\n            </button>\n          </div>\n        </div>\n      </article>\n    </>\n  );\n};\n\nexport default Login;\n","import React from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport { useApolloClient, useMutation } from \"@apollo/react-hooks\";\nimport { CREATE_POST, GET_POSTS, LOGIN } from \"./queries.js\";\n\nconst backendLogin = async (\n  loginMutation,\n  getAccessToken,\n  client,\n  user,\n  setIsLoading\n) => {\n  try {\n    const opts = {\n      redirectUri: window.location.origin,\n      audience: process.env.REACT_APP_AUTH0_AUDIENCE,\n      scope: \"openid email profile update:posts\",\n    };\n    const accessToken = await getAccessToken(opts);\n\n    client.writeData({ data: { accessToken: accessToken } });\n  } catch (e) {\n    console.log(e.message);\n  }\n\n  const variables = {\n    variables: { id: user.sub, name: user.name, avatar: user.picture },\n  };\n  loginMutation(variables);\n\n  setIsLoading(false);\n};\n\nconst CreatePost = ({ setIsSubmitted }) => {\n  const { user, getAccessTokenWithPopup } = useAuth0();\n  const client = useApolloClient();\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [titleValue, setTitleValue] = React.useState(\"\");\n  const [contentsValue, setContentsValue] = React.useState(\"\");\n  const [submitEnabled, setSubmitEnabled] = React.useState(false);\n\n  const handleTitleChanged = (e) => {\n    setTitleValue(e.target.value);\n  };\n\n  const handleContentsChanged = (e) => {\n    setContentsValue(e.target.value);\n\n    if (e.target.value.trim() === \"\") {\n      setSubmitEnabled(false);\n    } else {\n      setSubmitEnabled(true);\n    }\n  };\n\n  const [login] = useMutation(LOGIN);\n  React.useEffect(() => {\n    backendLogin(login, getAccessTokenWithPopup, client, user, setIsLoading);\n  }, [login, getAccessTokenWithPopup, client, user, setIsLoading]);\n\n  const [createPost] = useMutation(CREATE_POST);\n  const handleCreatePost = () => {\n    const updateCache = (cache, { data: { createPost } }) => {\n      const { posts } = cache.readQuery({ query: GET_POSTS });\n      cache.writeQuery({\n        query: GET_POSTS,\n        data: { posts: posts.concat([createPost]) },\n      });\n      setIsSubmitted(true);\n    };\n    const variables = {\n      variables: { id: user.sub, title: titleValue, contents: contentsValue },\n      update: updateCache,\n    };\n    createPost(variables);\n    setTitleValue(\"\");\n    setContentsValue(\"\");\n  };\n\n  return isLoading ? (\n    <div className=\"content has-text-centered\">\n      <div className=\"lds-circle\">\n        <div></div>\n      </div>\n    </div>\n  ) : (\n    <article className=\"media\">\n      <figure className=\"media-left\">\n        <p className=\"image is-64x64\">\n          <img src={user.picture} alt=\"Your avatar\" />\n        </p>\n      </figure>\n      <div className=\"media-content\">\n        <div className=\"content\">\n          <p className=\"has-text-centered\">\n            Posting as <strong>{user.name}</strong>\n          </p>\n        </div>\n        <div className=\"field\">\n          <input\n            id=\"titleInput\"\n            className=\"input is-info is-focused is-rounded\"\n            type=\"text\"\n            placeholder=\"Comment title...\"\n            value={titleValue}\n            onChange={(e) => handleTitleChanged(e)}\n          />\n        </div>\n        <hr />\n        <div className=\"field\">\n          <textarea\n            id=\"contentsInput\"\n            className=\"textarea is-info is-rounded\"\n            type=\"text\"\n            placeholder=\"Comment body...\"\n            value={contentsValue}\n            onChange={(e) => handleContentsChanged(e)}\n          />\n        </div>\n        <nav className=\"level\">\n          <div className=\"level-right\">\n            <div className=\"level-item\">\n              <button\n                className=\"button is-primary is-rounded\"\n                onClick={handleCreatePost}\n                disabled={!submitEnabled}\n              >\n                <strong>Submit</strong>\n              </button>\n            </div>\n          </div>\n        </nav>\n      </div>\n    </article>\n  );\n};\n\nexport default CreatePost;\n","import React from \"react\";\n\nconst LoadingTop = () => {\n  return (\n    <>\n      <article className=\"media\">\n        <div className=\"media-content\">\n          <div className=\"content has-text-centered\">\n            <div className=\"lds-circle\">\n              <div></div>\n            </div>\n          </div>\n        </div>\n      </article>\n    </>\n  );\n};\n\nexport default LoadingTop;\n","import React from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport Login from \"./Login.js\";\nimport CreatePost from \"./CreatePost.js\";\nimport LoadingTop from \"./LoadingTop.js\";\n\nconst PostsTop = ({ setIsSubmitted }) => {\n  const { isLoading, isAuthenticated } = useAuth0();\n\n  if (isLoading) {\n    return <LoadingTop />;\n  }\n\n  return isAuthenticated ? (\n    <CreatePost setIsSubmitted={setIsSubmitted} />\n  ) : (\n    <Login />\n  );\n};\n\nexport default PostsTop;\n","import gql from \"graphql-tag\";\n\nexport const typeDefs = gql`\n  extend type Query {\n    accessToken: String!\n  }\n`;\n\nexport const resolvers = {};\n","import React from \"react\";\nimport Posts from \"./Posts.js\";\nimport PostsTop from \"./PostsTop.js\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { setContext } from \"apollo-link-context\";\nimport { typeDefs, resolvers } from \"./resolvers.js\";\nimport { GET_ACCESS_TOKEN } from \"./queries.js\";\nimport { Auth0Provider } from \"@auth0/auth0-react\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport \"./css/styles.css\";\n\nconst cache = new InMemoryCache();\n\ncache.writeData({\n  data: {\n    accessToken: \"\",\n  },\n});\n\nconst httpLink = new HttpLink({\n  uri: `${process.env.REACT_APP_GUESTBOOK_BACKEND}/graphql`,\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const data = cache.readQuery({ query: GET_ACCESS_TOKEN });\n  const token = (data && data[\"accessToken\"]) || null;\n\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  cache,\n  link: authLink.concat(httpLink),\n  typeDefs,\n  resolvers,\n});\n\nconst Guestbook = () => {\n  const [isSubmitted, setIsSubmitted] = React.useState(false);\n\n  return (\n    <Auth0Provider\n      domain={process.env.REACT_APP_AUTH0_DOMAIN}\n      clientId={process.env.REACT_APP_AUTH0_CLIENT_ID}\n      redirectUri={window.location.origin}\n      audience={process.env.REACT_APP_AUTH0_AUDIENCE}\n      scope=\"update:posts\"\n    >\n      <ApolloProvider client={client}>\n        <div className=\"guestbook-content\">\n          {isSubmitted ? null : <PostsTop setIsSubmitted={setIsSubmitted} />}\n          <Posts />\n        </div>\n      </ApolloProvider>\n    </Auth0Provider>\n  );\n};\n\nexport default Guestbook;\n","import React from \"react\";\nimport Guestbook from \"./Guestbook.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Guestbook />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}